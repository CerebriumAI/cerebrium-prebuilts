name: "Deploy Prebuilt"
on:
  workflow_dispatch:
    inputs:
      api_key:
        description: "API Key"
        type: string
        required: true

      template_folder:
        description: "Path to template folder in repo"
        type: string
        required: true

      name:
        description: "Name"
        type: string
        required: true

      hardware:
        description: "Hardware"
        type: choice
        required: false
        default: "TURING_5000"
        options:
          - "None"
          - "CPU"
          - "A10"
          - "TURING_4000"
          - "TURING_5000"
          - "AMPERE_A4000"
          - "AMPERE_A5000"
          - "AMPERE_A6000"
          - "AMPERE_A100"

      cpu:
        description: "Number of CPUs"
        type: string
        required: false
        default: "2"

      memory:
        description: "Memory in GB"
        type: string
        required: false
        default: "14.5"
      
      hide_build_logs:
        description: "Hide build logs"
        type: boolean
        required: false
        default: false

env: 
  NAME: ${{github.event.inputs.name}}
  API_KEY: ${{github.event.inputs.api_key}}
  HARDWARE: ${{github.event.inputs.hardware}}
  CPU: ${{github.event.inputs.cpu}}
  MEMORY: ${{github.event.inputs.memory}}

jobs:
  deploy-model:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

        # Set the working dir
        # working-directory: ${{github.event.inputs.template_folder}} ???

        # change dir into the provided template folder


      - name: Mask API-Key
        run: |
          API_KEY=$(jq -r '.inputs.api_key' $GITHUB_EVENT_PATH)
          echo ::add-mask::$API_KEY
          echo API_KEY=$API_KEY >> $GITHUB_ENV

      - name: Install Cerebrium
        run: pip install cerebrium

      - name: Cerebrium deploy
        # run: cerebrium deploy ${{env.NAME}} --api-key ${{env.API_KEY}} --hardware ${{env.HARDWARE}} --cpu ${{env.CPU}} --memory ${{env.MEMORY}}
        run: |
          export templatePath="$(pwd)/${{github.event.inputs.template_folder}}"
          echo "Template Path: $templatePath"
          if [ -d $templatePath ]; then
            echo "Template Folder: ${{github.event.inputs.template_folder}}"
            cd ./${{github.event.inputs.template_folder}}
          else
            echo "Template Folder does not exist"
            exit 1
          fi

          echo "Current Directory: $(pwd)"
          echo "Found the following files:"
          ls ./
          if [ ${{github.event.inputs.hide_build_logs}} == "true" ]; then
            echo "Hiding build logs"
            export buildParams="--hide-public-endpoint --hide-build-logs"
          else
            export buildParams="--hide-public-endpoint"
          fi

          cerebrium deploy ${{github.event.inputs.name}} --api-key ${{env.API_KEY}} --hardware ${{github.event.inputs.hardware}} --cpu ${{github.event.inputs.cpu}} --memory ${{github.event.inputs.memory}} $buildParams
  
  test-env:
    env: 
      FOLDER: ${{github.event.inputs.template_folder}}
    runs-on: ubuntu-latest
    steps:

      - name: "Checkout"
        uses: actions/checkout@v2
      
      - name: Mask API-Key
        run: |
          API_KEY=$(jq -r '.inputs.api_key' $GITHUB_EVENT_PATH)
          echo ::add-mask::$API_KEY
          echo API_KEY=$API_KEY >> $GITHUB_ENV
      
      - name: export folder
        run: |
          echo "Folder was: ${{env.FOLDER}}"
          echo "setting folder to:"
          echo "$(pwd)/${{github.event.inputs.template_folder}}"
          echo FOLDER="$(pwd)/${{github.event.inputs.template_folder}}" >> $GITHUB_ENV
          echo "Folder now: ${{env.FOLDER}}"



      - name: check if config.yaml exists
        id: check_config
        uses: andstor/file-existence-action@v2
        with:
          files: "${{env.FOLDER}}/config.yaml"

      - name: print env
        run: |
          echo "NAME: ${{env.NAME}}"
          echo "API_KEY: ${{env.API_KEY}}"
          echo "HARDWARE: ${{env.HARDWARE}}"
          echo "CPU: ${{env.CPU}}"
          echo "MEMORY: ${{env.MEMORY}}"

      - name: Get deployment params from config yaml
        if: steps.check_config.outputs.files_exists == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install yq -y
        
          cd ${{env.FOLDER}}

          # set all the inputs as environment variables
          if [ ${{github.event.inputs.name}} == "None" ]; then
            echo "name is not set"
            # setting name to repo name
            echo NAME=${{github.repository}} >> $GITHUB_ENV
          else
            echo "name is set"
            echo NAME=${{github.event.inputs.name}} >> $GITHUB_ENV
          fi

          # setting hardware to TURING_5000 as default
          echo HARDWARE=TURING_5000 >> $GITHUB_ENV
          if [ ${{github.event.inputs.hardware}} == "None" ]; then
            echo "hardware is not set"
            if [ -f config.yaml ]; then
              echo "Looking for hardware in config.yaml"
              hardware=$(yq eval '.hardware' config.yaml)
              if [ $hardware != "null" ]; then
                echo "hardware is set in config to: $hardware"
                echo HARDWARE=$hardware >> $GITHUB_ENV
              fi
            else
              echo "hardware set to default of TURING_5000"
            fi
          else
            echo "hardware is set in inputs"
            echo HARDWARE=${{github.event.inputs.hardware}} >> $GITHUB_ENV
          fi

          # setting cpu to 2 as default
          echo CPU=2 >> $GITHUB_ENV
          if [ ${{github.event.inputs.cpu}} == "None" ]; then
            echo "cpu is not set"
            if [ -f config.yaml ]; then
              echo "Looking for cpu in config.yaml"
              cpu=$(yq eval '.cpu' config.yaml)
              if [ $cpu != "null" ]; then
                echo "cpu is set in config to: $cpu"
                echo CPU=$cpu >> $GITHUB_ENV
              fi
            else
              echo "cpu set to default of 2"
            fi
          else
            echo "cpu is set in inputs"
            echo CPU=${{github.event.inputs.cpu}} >> $GITHUB_ENV
          fi

          # setting memory to 14.5 as default
          echo MEMORY=14.5 >> $GITHUB_ENV
          if [ ${{github.event.inputs.memory}} == "None" ]; then
            echo "memory is not set"
            if [ -f config.yaml ]; then
              echo "Looking for memory in config.yaml"
              memory=$(yq eval '.memory' config.yaml)
              if [ $memory != "null" ]; then
                echo "memory is set in config to: $memory"
                echo MEMORY=$memory >> $GITHUB_ENV
              fi
            else
              echo "memory set to default of 14.5"
            fi
          else
            echo "memory is set in inputs"
            echo MEMORY=${{github.event.inputs.memory}} >> $GITHUB_ENV
          fi
      - name: test ENV changed
        run: |
          echo "NAME: ${{env.NAME}}"
          echo "API_KEY: ${{env.API_KEY}}"
          echo "HARDWARE: ${{env.HARDWARE}}"
          echo "CPU: ${{env.CPU}}"
          echo "MEMORY: ${{env.MEMORY}}"

